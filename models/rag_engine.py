# filepath: c:\Users\friti\Downloads\projfinance\models\rag_engine.py
"""
Module de RAG (Retrieval-Augmented Generation) et classification LLM.
"""
import re, json, os
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.schema import Document
from langchain_community.chat_models import ChatOllama
from models.utils import BASE, FAISS_DIR, JSON_RULES, EMBED_MODEL

# Cache pour les classifications LLM
_classification_cache = {}

def build_faiss():
    """Reconstruit l'index FAISS √† partir des r√®gles fiscales."""
    print(f"üîÑ Chargement des r√®gles depuis {JSON_RULES}")
    try:
        with open(JSON_RULES, encoding="utf-8") as f:
            rules = json.load(f)
        print(f"‚úÖ {len(rules)} r√®gles charg√©es")
        
        # Afficher un aper√ßu des premi√®res r√®gles
        for i, r in enumerate(rules[:3]):
            print(f"\nR√®gle {i+1}:")
            print(f"  Ann√©e: {r.get('ann√©e')}")
            print(f"  Taux: {r.get('taux')}")
            print(f"  Date application: {r.get('date_application')}")
            print(f"  B√©n√©ficiaire: {r.get('b√©n√©ficiaire')}")
            print(f"  Paragraphe: {r.get('paragraphe', '')[:50]}...")
            print(f"  Lien source: {r.get('lien_source', '')}")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du fichier JSON: {e}")
        print(f"Chemin actuel: {os.getcwd()}")
        print(f"Le fichier existe: {os.path.exists(JSON_RULES)}")
        return None
    
    docs = []
    for r in rules:
        # Extraction am√©lior√©e de l'ann√©e
        annee_str = r.get("ann√©e", "0")
        annee = 0
        if isinstance(annee_str, str):
            match = re.search(r'\d+', annee_str)
            if match:
                annee = int(match.group(0))
        
        # Contenu enrichi pour une meilleure recherche s√©mantique
        txt = (f"Cat√©gorie: {r.get('categorie', 'Non sp√©cifi√©')} | "
               f"Type: {r.get('type_de_revenu_ou_service', 'Non sp√©cifi√©')} | "
               f"Taux: {r.get('taux', 'N/A')} | "
               f"B√©n√©ficiaire: {r.get('b√©n√©ficiaire', 'Non sp√©cifi√©')} | "
               f"Application: {r.get('date_application', 'Non sp√©cifi√©e')}")
        
        docs.append(Document(
            page_content=txt,
            metadata={
                "annee": annee,
                "taux_num": r.get("taux_num"),
                "reference": r.get("r√©f√©rence_l√©gale", "Non sp√©cifi√©"),
                "source_file": r.get("source_file", "Non sp√©cifi√©"),
                "date_application": r.get("date_application", "Non sp√©cifi√©"),
                "paragraphe": r.get("paragraphe", "Non sp√©cifi√©"),
                "lien_source": r.get("lien_source", ""),
                "beneficiaire": r.get("b√©n√©ficiaire", "Non sp√©cifi√©"),
                "seuil": r.get("seuil", "Non sp√©cifi√©")
            }
        ))
    
    # Cr√©er les embeddings
    embedder = HuggingFaceEmbeddings(model_name=EMBED_MODEL)
    
    print(f"üîÑ Cr√©ation de l'index FAISS avec {len(docs)} documents")
    vect = FAISS.from_documents(docs, embedder)
    FAISS.save_local(vect, str(FAISS_DIR))
    print("‚úÖ Index FAISS reconstruit avec donn√©es enrichies.")
    return vect

def get_faiss_retriever():
    """Renvoie un retriever FAISS pr√™t √† l'emploi."""
    try:
        embedder = HuggingFaceEmbeddings(model_name=EMBED_MODEL)
        vect = FAISS.load_local(
            str(FAISS_DIR),
            embeddings=embedder,
            allow_dangerous_deserialization=True
        )
        print("‚úÖ Index FAISS charg√© depuis le disque")
        return vect.as_retriever(search_kwargs={"k": 8})
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de l'index FAISS: {e}")
        print("üîÑ Tentative de reconstruction de l'index...")
        vect = build_faiss()
        if vect is None:
            print("‚ùå Impossible de construire l'index FAISS. V√©rifiez le fichier JSON.")
            return None
        return vect.as_retriever(search_kwargs={"k": 8})

def classify_transaction_with_llm(service, montant, year, rules_json):
    """Classification d'une transaction avec LLM en utilisant le fichier JSON de r√®gles."""
    
    # Cache key pour √©viter de r√©interroger le LLM pour des cas similaires
    cache_key = f"{service}|{montant}|{year}"
    if cache_key in _classification_cache:
        return _classification_cache[cache_key]
    
    # D√©tection directe pour √©lectricit√© (avant m√™me de consulter le cache)
    if re.search(r"(?:achat\s+)?elec[dt]?ri(?:c|qu|k)(?:i|it[√©e])", service.lower().replace('√©', 'e')):
        return {
            "categorie": "electricite",
            "taux": 1.5,
            "ref": "Code IRPP-IS Art. 52",
            "doc": "Code fiscal 2021",
            "date_app": "Ancien - en vigueur 2021-2025",
            "parag": "Retenue de 1.5% sur achats d'√©lectricit√© selon l'article 52 du Code IRPP-IS",
            "lien": "https://www.finances.gov.tn/fr/apercu-general-sur-la-fiscalite",
            "benef": "Fournisseurs d'√©lectricit√©"
        }
    
    # 3. Limitation du nombre de r√®gles pour √©viter un prompt trop long
    rules_sample = []
    if len(rules_json) > 5:
        # Prendre d'abord les r√®gles qui correspondent au service
        service_lower = service.lower()
        matching_rules = [r for r in rules_json 
                         if service_lower in str(r.get("type_de_revenu_ou_service", "")).lower()]
        
        # Si on a trouv√© des r√®gles correspondantes, les utiliser
        if matching_rules:
            rules_sample = matching_rules[:5]
        else:
            # Sinon prendre simplement les 5 premi√®res r√®gles
            rules_sample = rules_json[:5]
    else:
        rules_sample = rules_json
    
    rules = json.dumps(rules_sample, ensure_ascii=False)
    
    # Construction du prompt pour le LLM avec les r√®gles sp√©cifiques
    prompt = f"""
    ### CONTEXTE: Classification fiscale pour retenues √† la source en Tunisie (2021-2025)

    Tu es un expert fiscal charg√© de d√©terminer la cat√©gorie de service, le taux applicable, 
    et la r√®gle fiscale correspondante pour chaque transaction.

    **Instructions** :
    - Cherche dans les r√®gles fiscales fournies une correspondance pr√©cise sur type de revenu, b√©n√©ficiaire, taux et r√©f√©rence.
    - Si aucune correspondance exacte, applique ces r√®gles sp√©cifiques:
        - Location de bureaux ‚Üí 15% (cat√©gorie: loyers)
        - Consultant, Marketing, Transport, Maintenance, Nettoyage ‚Üí 10% (cat√©gorie: honoraires/prestations)
        - Services informatiques/IT ‚Üí 10% (cat√©gorie: honoraires)
        - Construction/BTP ‚Üí 10% (cat√©gorie: honoraires)
        - Fournitures, mat√©riel m√©dical ‚Üí 1% (cat√©gorie: marchandises) si IS 15%
        - √âlectricit√©, achat √©lectricit√©, fourniture d'√©lectricit√© ‚Üí 1.5% (cat√©gorie: electricite) selon Art 52 Code IRPP-IS
        - Revenus mobiliers ‚Üí 20% sur dividendes (cat√©gorie: mobiliers)
        - Frais bancaires ‚Üí Exon√©r√©s - 0% (cat√©gorie: exonere)
        - Assurance ‚Üí Exon√©r√©e - 0% (cat√©gorie: exonere)
        - Produits alimentaires ‚Üí 1% (cat√©gorie: alimentaire) conform√©ment √† la LF 2021
        - Autres prestations de services ‚Üí 10% (cat√©gorie: honoraires)
        - Autres achats de marchandises ‚Üí 1% (cat√©gorie: marchandises)
    - IMPORTANT: Appliquer 3% UNIQUEMENT pour les personnes physiques au r√©gime r√©el ET SEULEMENT si l'article 14 de la loi 2020-46 est explicitement applicable.
    - Dans tous les autres cas de prestations de services, appliquer 10% m√™me si "r√©gime r√©el" est mentionn√©.
    - Attention aux montants : les acquisitions de marchandises ‚â§ 1 000 DT sont exon√©r√©es (franchise pr√©vue par l'Art 17 de la LF 2021).
    - Toujours pr√©f√©rer une r√®gle sp√©cifique avec r√©f√©rence l√©gale explicite avant d'utiliser une r√®gle g√©n√©rale.
    - TOUJOURS INCLURE LE LIEN SOURCE SI DISPONIBLE.
    - TOUJOURS inclure un paragraphe explicatif citant l'article de loi pertinent.

    **Transaction √† analyser**:
    - Service: {service}
    - Montant: {montant} DT
    - Ann√©e fiscale: {year}

    **R√®gles fiscales disponibles**:
    {rules}

    **Format strict de r√©ponse JSON** :
    ```json
    {{
    "categorie": "marchandises, honoraires, loyers, electricite, mobiliers, exonere, etc.",
    "taux": 10.0,
    "ref": "r√©f√©rence l√©gale (ex: Code IRPP-IS / Loi n¬∞2020-46)",
    "doc": "document source",
    "date_app": "date d'application",
    "parag": "extrait de la r√®gle avec citation pr√©cise de l'article de loi applicable",
    "lien": "lien source si disponible",
    "benef": "type de b√©n√©ficiaire concern√©, pr√©ciser si personne physique au r√©gime r√©el"
    }}
    ```
    R√©ponds uniquement au format JSON sans aucun texte additionnel."""
    
    try:
        # V√©rifier si le LLM est d√©fini
        if 'llm' not in globals():
            llm = ChatOllama(model="deepseek-r1:8b")
            print("‚úÖ LLM initialis√© pour la classification")
        
        # Invoquer le LLM
        response = llm.invoke(prompt)
        
        # Parser la r√©ponse JSON
        response_text = response.content
        # Extraire le JSON de la r√©ponse (si entour√© de ```json...```)
        json_match = re.search(r'```(?:json)?\s*(\{.*?\})\s*```', response_text, re.DOTALL)
        if json_match:
            json_str = json_match.group(1)
        else:
            # Essayer de trouver directement un objet JSON
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                
                # Correction des √©chappements invalides
                json_str = re.sub(r'\\([^"\\/bfnrtu])', r'\\\\\1', json_str)
                
                # Traitement sp√©cial pour les chemins Windows
                json_str = re.sub(r'\\\\([a-zA-Z]:\\\\)', r'\\\\\1', json_str)
            else:
                return None
        
        try:
            # Parser le JSON avec corrections
            classification = json.loads(json_str)
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur JSON apr√®s premi√®re correction: {e}")
            try:
                # Solution de secours: double √©chappement de tous les backslashes
                json_str = json_str.replace('\\', '\\\\')
                # Mais √©viter de doubler ceux d√©j√† doubl√©s
                json_str = json_str.replace('\\\\\\\\', '\\\\')
                classification = json.loads(json_str)
            except json.JSONDecodeError as e2:
                print(f"‚ùå √âchec du parsing JSON m√™me apr√®s corrections: {e2}")
                return None
        
        # Si lien est vide mais qu'on a une cat√©gorie, chercher un lien dans les r√®gles
        if (not classification.get("lien") or classification.get("lien") == "") and classification.get("categorie"):
            cat = classification.get("categorie").lower()
            # Chercher dans toutes les r√®gles un lien correspondant √† cette cat√©gorie
            for rule in rules_json:
                rule_type = str(rule.get("type_de_revenu_ou_service", "")).lower()
                if cat in rule_type and rule.get("lien_source"):
                    classification["lien"] = rule.get("lien_source")
                    print(f"‚úÖ Ajout automatique du lien source pour {cat}: {classification['lien']}")
                    break
        
        _classification_cache[cache_key] = classification  # Mettre en cache le r√©sultat
        return classification
    
    except Exception as e:
        print(f"‚ùå Erreur lors de la classification LLM: {e}")
        return None